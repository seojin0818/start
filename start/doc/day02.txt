 # day02
 
 ------------------------------------------------

자바를 이용해서 뭔가를 만들고 싶다면
 컴파일러 필요 + 연계편집을 위한 도구 필요 (이것을 JVM이라고 부름)
 이 두가지를 제공하는 도구를 다운 받아서 사용해야함
 ==> JDK가 바로 이 두가지 도구를 제공
 	 물론 이 안에는 2가지 기능 외에도 필요한 각종 도구들이 패키지로 묶여서 제공되고 있음
 	
 System.out.println 에서 System은 클래스 (ctrl키 누르고 클릭)
 
---------------------------------------------------

실행 원리

	1. 자바 언어의 문법에 맞게 자연어로 프로그램 만들기
		이 프로그램은 저장되어야 함
		규칙
			1) 저장할 파일의 이름은 class 이름과 반드시 대소문자까지 동일해야함
			2) 확장자는 반드시 .java로 만들어야함
			
			예 ]
			
				class Test {
					...
				}
				
				==> Test.java : 파일 이름
			
	2. 만들어진 소스 파일은 컴파일해야 컴퓨터가 이해할 수 있는 기계어가 탄생됨
		
		컴파일 하는 방법 (형식)
		
			javac 파일이름.java
			
			예 ]
			
				javac Test.java
				
				이 때 옵션이 붙여질 수 있음
				
			컴파일 단계를 거치면 확장자가 .class인 파일이 만들어지는데
			이 파일을 바이트 코드라고 함
				==> Test.class
				
			참고 ]
			
				cmd창에서는 현재 폴더에 있는 도구만 사용할 수 있는 것이 원칙
				다른 폴더에 있는 도구를 사용하기 위해서는 연결을 시켜줘야함
				(해당 도구의 위치를 시스템이 인식하고 있으면 됨) = 그 경로를 "path"에 등록해주면 됨 = 환경변수 설정 작업
			
	3. 만들어진 class 파일은 배포 됨
		==> 다른 사람에게 실행하도록 줄 수 있음
		
		실행하는 방법
		
			java 클래스이름
			
* 용어 설명

	API : 운영체제와 프로그램 사이에 원활한 작동을 위해서 양쪽을 연결해주는 도구
	라이브러리 : API가 사용하는 도구에 필요한 정보를 기억한 프로그램의 일종
	
	우리가 JDK를 설치하면
	자바로 만든 프로그램과 해당 운영 체제 사이를 원활하게 작동시키기 위한 API도 같이 설치됨
	
	물론 이것에 포함된 라이브러리도 같이 설치됨
	특정 명령을 수행하기 위해서는 어떤 절차를 거쳐야 하는지를 기록한 문서에 해당
	
	예 ]
	
		if(){
		
		}
		
		==> 이 명령을 실행하기 위해서는 절차가 필요한데 그것을 기록해놓은 문서를 라이브러리 라고 표현함
		
	결론적으로 API 안에는 라이브러리가 반드시 포함되어야함
	
-----------------------------------------------------------------------------

	public class Test01 {
		public static void main (String[] args) {
		
		public static void abc() {} : 함수는 class 블럭 아래에 몇 개라도 올 수 있음
		
		public static void xyz() {}
		
		Test01.abc () : Test01 클래스 안에 있는 abc 함수 호출
		
	static : 먼저 메모리에 올려놓음 / static 영역에 클래스가 실행되는 순간 먼저 올려짐
	static 없이 void만 있으면 Test01. abc() {} 오류 (올라가있지 않으니까)
	==> Test01 t1 = new Test01();
		t1.abc(); 로 해야 오류 x
		
--------------------------------------------------------------------------

소스코드의 실행에는 영향을 미치지 않고
주로 설명을 하는데 사용하는 문장 : 주석
따라서 주석은 컴파일되지 않음

자바에서 주석을 표현하는 방법 ]

	1. 단일행 (한줄)
	
		형식 ] 
		
			//
			
			==> 해당 행의 이 기호 이후는 모두 주석으로 처리
			
	2. 다중행 (여러줄)
	
		형식 ]
		
			/*
				
				내용
				
			*/
		
	3. 배포 문서에 포함되는 주석
	
		형식 ]
		
			/**
			
			*/
			
---------------------------------------------------------------------
	
	함수는 함수 자신이 스스로 실행되는 경우는 없음
	함수는 반드시 누군가 호출해야 실행됨
	
	함수 호출 형식 ]
	
		함수이름([데이터]);
		
	클래스가 실행되기 위해서는 JVM에 의해서 실행되는 함수가 있어야함
	
	문제는 JVM은 아무 함수나 사용하는 것이 아니고
	오직
		"public static void main(String[] args)"
	이 함수만 호출을 하게 됨
	
	==> 이처럼 어떤 프로그램이 시작하는 함수 : 진입점 함수
	
	클래스 블럭 바로 아래에는 일반명령 절대로 x
	클래스 블럭 ( {} )에 올 수 있는 것은
		변수, 함수
		
	==> 클래스는 변수와 함수로 구성
	
	main 함수는 맨 처음 시작되는 클래스에 딱 한번만 사용되고
	나머지 클래스에는 대부분 사용되지 않음 ==> 반드시 진입점 함수가 있어야하는 것 아니고 실행될 필요가 있는 것들만 메인함수를 가짐
	
----------------------------------------------------------------------

클래스 : 소스코드 파일 / 하드디스크에 파일로 저장 / 틀이기 때문에 여러번 실행 가능
==> 메모리에 올려야 
클래스 안에는 필요한 함수나 필요한 변수를 포함할 수 있음
클래스 안에 일반 명령은 절대로 올 수 없음

이 때 클래스에 포함되는 함수, 변수를 멤버라고 부름
이 때 멤버로 만들어진 변수를 Field라고 부름

멤버 중 속성이 static인 멤버 : static 멤버

static 멤버의 특징

	1. static 영역에 실행되는 순간 미리 올려지는 멤버들
	
	2. 해당 멤버가 소속된 클래스를 new 시켜서 메모리에 올려놓지 않아도 그 멤버는 사용 가능
		
	3. static 영역에 올려지는 멤버는 같은 이름으로 여러개 올려질 수 없음
		==> 변수의 경우 하나를 공유해서 사용하게 되는 결과 발생 (static 영역에 하나만 만들어줄 것이기 때문에)
		
	4. static 함수에서는 static 멤버만 (메모리에 기억되어있는 멤버만) 사용 가능
	
	결론 ]
	
		public class Test {
			int num;
			float area;		// 변수 포함 가능
			
			public void xyz(){
			}
			
			public void abc(){
			}				// 함수도 포함 가능
		
			public static void main(String[] args) {
				실행내용
			}	
			
--------------------------------------------------------------------------

상수와 변수 ☆★☆★

	1. 상수
		==> 개발자가 프로그램에게 알려주는 (정보) 데이터
		
	예 ]
		
		System.out.println("Hello");
		의 경우 "Hello"는 상수(Literal)
		
	문제는 상수는 "Literal Pool"이라는 장소에 일단 저장한 후 사용되도록 되어있음
	
	예 ]
	
		System.out.println("Hello"); 라고 명령을 하면
			1) 먼저 Literal pool에 "Hello" 라는 데이터 자체를 기억시켜놓고
				<== 이 때 Literal pool은 메모리 영역이고 기억되는 데이터는 주소를 가지게 됨
			
			2) Literal pool에 기억된 데이터를 꺼내서 출력하게 됨
			
	종류 ]
	
		1) 정수형
			일반적인 소수점이 없는 숫자
			
				10		- 10진수
				010		- 8진수
				0x10	- 16진수
				
		2) 실수형
			소수점이 존재하는 숫자
			
				3.14	일반적인 소수 방식
				3.0e5	지수 방식
						3.0 * 10의 5승
						
		3) 논리형
			참과 거짓을 의미하는 데이터
			
				true
				false
				==> 위의 2가지 이외에는 절대로 논리형을 표현할 수 없음 (자바의 경우)
				
				boolean bool = true;
				
		4) 문자형 - ''
			오직 한글자로만 구성된 문자
			==> 내부적으로는 입력한 문자를 유니코드 방식으로 변환해서 기억
			
			'a' - 97이라는 정수를 사용해서 기억
					이 때 사용되는 97이라는 숫자는 아스키 코드값
					
			'\u0000' - 실제 유니코드 값으로 문자를 기억할 수 있음
						0000은 원하는 문자에 해당하는 유니코드 값
						
		5) 문자열형 - ""
			한글자 이상으로 구성된 문자
			==> 엄밀히 말하면 기본 상수는 아님
				개발자 입장에서 매우 빈번하게 사용하는 형태이므로 포함시켜놓음
				
-------------------------------------------------------------------------------

2. 변수

	참고 ]
	
		변수의 필요성
			개발자가 입력한 데이터는 일단 리터럴 풀에 저장됨
			그리고 프로그램이 리터럴 풀에 있는 데이터를 꺼내서 사용하게 됨
			
			리터럴 풀은
			주소를 모르면 사용할 수 없음
			(반드시 주소를 알아야 사용할 수 있음)
			
			변수는 리터럴 풀에 저장된 데이터를 개발자가 필요한 순간에 다시 재사용할 수 있도록
			저장된 주소를 기억해놓는 역할
			
			
	참고 ]
	
		Stack의 특징
			1. 메모리에 별칭을 붙여서 사용할 수 있는 영역
				(별칭 : 개발자가 붙이는 것이므로 개발자가 가장 손쉽게 사용할 수 있는 영역)
			2. 8개의 영역 중에서 리터럴 풀 다음으로 가장 작은 영역을 운영체제에게서 배정받음 
				(8개 중 static, stack, heap, literal pool 4개 기억)
				따라서 Stack에는 많은 양의 데이터를 보관하려면 문제 발생 가능성
				
--------------------------------------------------------------------------------

	리터럴 풀에 있는 데이터를 Stack에서 기억하는 방법
	
		1. Stack에 필요한 메모리를 할당 받음
			형식 ] 변수 선언
			
				데이터타입		변수이름;
				
				==> 데이터타입의 기술은 2가지 의미
						1) 기억할 데이터의 형태
						2) 필요한 메모리의 크기
						
				참고 ]
				
					변수이름은 앞에서 설명한 Stack에 붙이는 별칭
					따라서 변수이름만 기억하고 있으면 언제든지 이 변수가 기억하고 있는 데이터를 사용할 수 있게 됨
				
				참고 ]
				
					데이터 타입에 의한 변수의 분류
					
						1. 기본형 변수
							- 자바에서 제공해주는 기본 데이터 타입의 데이터를 기억할 변수
							
							참고 ]
								
									Stack 영역에 메모리를 할당 받는 방법
									JVM에게 할당 받은 메모리 크기와 그 안에 저장할 데이터 형태를 알려줘야함
							
							참고 ]
							
								자바의 기본 데이터 타입
								
									논리형
										boolean - 1byte
										
									문자형
										char - 2byte
										
									정수형
										byte	- 1byte
										short	- 2byte
										int		- 4byte
										long	- 8byte
										
									실수형
										float	- 4byte
										double	- 8byte
									
						2. 참조형 변수
							- 기본형 데이터 이외의 모든 데이터를 기억하는 변수 (클래스를 기억하는 변수)
							- new를 이용하기 때문에 heap 영역 이용
					
		2. 대입(기억) 연산자를 이용해서 필요한 데이터를 기억함
		
			형식 ] 변수 초기화
			
				변수이름 = 데이터;
				
			예 ]
			
				no = 10;
		
-------------------------------------------------------------------------

자바 프로그램 토큰 구분
==> 토큰 : 프로그램 실행 단위
	컴파일러는 토큰 단위로 번역 시도
	따라서 개발자는 컴파일러가 번역하는 토큰을 구분해줘야함
	이것이 ";" 이라는 기호를 이용해서 구분하게 됨
	
	우리가 습관적으로
		int no = 10;
	했던 의미는 토큰을 구분하기 위한 기호
	
	결과적으로 토큰은 하나의 명령이 종료되었음을 알려주는 기호
	
	만약 개발자가 토큰 구분을 하지 않으면 오류 발생 가능성
	
	예 ]
	
		int no1 = 10
		int no2 = 20;
		==> 컴파일러는 두줄을 하나의 명령으로 인식해서 처리하게 될 것이고
			이런 명령 형식은 존재 x 에러 발생
			
	예 ]
	
		int no1 = 10; int no2 = 10;
		==> 한줄로 입력했지만 두개의 명령으로 인식해서 먼저 no1을 처리하고 
			그 명령이 처리된 후 no2에 대한 명령을 처리하게 됨
			
	
	참고 ]
	
		; 대신 } 기호가 그 역할을 대신할 수 있음
		
		예 ]
		
			if(조건식) {
			
				실행문...
				
			} // 이 부분에서 토큰 발생
			
				

			
