# day06

for 명령
	
	선조건 처리명령
	for(;;)처럼 안의 내용을 기술하지 않아도 무방함
	
	이 때 조건식은 항상 true로 처리
	
while 명령

	선조건 처리명령
	for 명령과는 다르게 형식 내부에 카운터변수 선언 부분이 없음
	따라서 카운터변수로 실행횟수를 제어하고자 한다면
	명령이 시작되기 전에 카운터변수를 선언 및 초기화를 해주고
	명령(블럭{}) 내부에서 증감식으로 증감해서 횟수를 제어해야 함
	
do - while 명령

	후조건 처리명령
	악조건 하에서도 적어도 한 번은 실행내용을 실행하는 반복문
	
참고 ]

	지역변수 : 해당 블럭 내에서만 사용 가능한 변수
		
	전역변수 : 클래스 내의 어디서든지 사용 가능한 변수
		
----------------------------------------------------------------------

flag 기법
==> 프로그램을 실행하다보면
	두가지 이상의 경우가 발생되는 순간이 존재함
	그 후에 어떤 경우가 발생했는지를 알아보는 방법
	
	예 ]
	
		for(;;){
		실행내용1
		
			if(조건){
				break;
			}
			
		실행내용2
		
		}
		(1)
		
		실행내용1의 경우는 반복문의 마지막 회차까지 실행됐는지 여부는 판별하기 어려움
		실행내용2의 경우도 마찬가지
		==> (1) 부분은 for 명령이 종료되면 실행되는 부분
		
		이 때
		(1) 부분을 실행할 때
		위의 반복문이 정상적으로 모두 반복해서 실행되었는지
		아니면 중간에 break 명령으로 종료가 되었는지를 판별해내는 기법
		
		방법 ]
			
			시작하기 전에 변수에 특정 데이터를 기억시켜놓고
			특정 순간이 발생하면 변수의 데이터를 변경시킴
			
			(1) 부분을 실행할 때 그 변수의 데이터를 살펴보면
			위의 반복문이 정상적으로 모두 처리되었는지
			중간에 강제 종료되었는지 확인할 수 있게 됨
			
----------------------------------------------------------------------

레이블이 붙은 반복문
	
	방법 ]
		
		레이블이름:
		for(;;){
			for(;;){
				실행내용
				if(){
					break 또는 continue		레이블이름;
				}
			}
		}
		
	예 ]
	
		2 x 1 = 2
		...
		2 x 9 = 18
		...
		5 x 1 = 5
		5 x 2 = 10
		5 x 3 = 15 ==> 이것이 나오면 그 다음은 출력하지말것
	
	주의 ]
		
		레이블을 사용한 제어는 반드시 소속 반복문에 한해서만 적용됨
		==> 감싸고 있는 반복문에 한해서만 적용 가능
		
	예 ]
		
		for() {
		
			loop:
			for(){
				for(){
					if(){
						break loop; ==> O
					}
				}
			}
			
			for(){
				for(){
					if(){
						break loop; ==> X
				}
			}
		}
		
----------------------------------------------------------------------

continue 명령
	반복문에만 사용되는 명령
	현재 반복을 중지하고 다음 반복을 처리하도록 하는 것
	==> 즉, 현재 작업은 무의미하므로 중지시키고
		다음 반복 작업을 진행하도록 하는 것
		
	주의 ]
	
		반복 명령문에 따라서 실행 위치가 달라짐
		
		for(카운터변수 선언 및 초기화 ; 조건식 ; 증감식){
			if(){
				continue;
			}
		}
		
		이처럼 for 반복문의 경우는
		continue 명령을 만나면 증감식으로 실행을 진행함
		
		while(조건식){
		
			if(){
				continue;
			}
		}
		
		while 반복문의 경우는 
		continue 명령을 만나면 반복문의 조건식을 실행함
		
		do {
			(1)
			continue;
			(2)
			
		} while(조건식(3));
		(4)
		
		(1) -> continue -> (3) true인 경우 	: (1)
						   (3) false인 경우 : (4)
							  
							  
* continue 명령 역시 감싸는 반복문에 레이블을 붙여서 제어 가능
