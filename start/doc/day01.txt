# day01

자바 : 객체 지향적 프로그래밍 언어

특징 ]

	1) 플랫폼 독립적 : 플랫폼 = 소프트웨어적 환경 / 즉, 어떤 운영체제라도 그대로 실행 가능 (단, JVM은 반드시 설치된 상태)
	2) 네트워크와 분산처리 지원
	3) 멀티 스레드 지원
	4) 동적 로딩 가능
	5) 가비지 컬렉터 : 자동 메모리 관리

대부분의 객체지향언어는 하드웨어에 직접 접근 불가 (C언어만 가능)

JVM(자바가상머신) = Java Virtual Machine : 자바 바이트 코드를 실행할 수 있는 환경 / 클래스 파일 실행시킴 / 소스코드 변경 불필요

< 컴파일 타임 환경 >

	자바 클래스 코드 .java -> 자바 컴파일러 -> 자바 바이트 코드 .class

< 컴퓨터 >

	1) 중앙처리장치 CPU
	2) 기억장치 [주기억장치 RAM(메모리) , 보조기억장치 HDD]
	3) 입출력장치 : 키보드, 마우스

프로그래밍한다는 것 = 메모리로 무언가를 하겠다는 것

< Java 메모리 구조 >

	Java Source : Hello.java / 사용자가 작성한 Java 코드
	Java Compiler : javac.exe / Java 코드를 바이트 코드로 변환
	Class 파일 : Hello.class
	Class loader : 클래스 파일을 메모리에 적재하는 기능
	Execution Engine : 바이트 코드를 실행 가능하게 해석해주는 기능
	Runtime Data Area : 프로그램을 수행하기 위해 OS에서 할당받은 메모리 공간 (클래스, 스택, 힙, Negative Method Stack, PC Register)

< Runtime Data Area >

	1. Class area = Method area = Static area = Code area
	- 클래스 코드를 저장하는 영역
	- 클래스 정보, 메소드 정보, 변수 정보, static 변수, 상수 pool
	
	2. 스택 : 변수들의 정보가 기억되는 공간
	- Last In First Out
	- 메소드 호출 시마다 각각의 스택프레임 생성
	- 메소드 안에서 사용되는 값들을 저장, 호출된 메소드의 매개변수, 지역변수, 리턴값 및 연산 시 일어나는 값들을 임시 저장
	- 메소드 수행 끝나면 프레임별로 삭제
	
	3. 힙 : 객체들의 정보가 기억되는 공간
	- new 연산자로 생성된 객체와 배열 저장
	- 클래스 영역에 로드된 클래스만 생성 가능
	- 가비지 컬렉터 가동 시 힙 영역을 지우는 것 -> 메모리 반환
	  Permanent Generation : 생성 객체 정보의 주소 값 저장
	  New Area
	 	- Eden : 객체들이 최초로 생성되는 공간
		- Survivor : Eden에서 참조되는 객체들 저장하는 공간
	  Old Area : New Area에서 일정시간 이상 참조되는 객체들 저장하는 공간
	  
	4. Literal Pool : 데이터 자체가 기억되는 공간 / 리터럴들이 모인 곳
	5. Negative Method Stack : 자바 외의 다른 언어에서 제공되는 메소드 저장
	6. PC Register
	- Thread가 생성될 때마다 생성되는 공간
	- Thread가 어떤 부분을 어떤 명령으로 실행할지에 대한 기록
	- 현재 실행되는 부분의 명령과 주소 저장

System.out.println(내용);
내용 출력 + 줄 바꿈 o

System.out.print(내용);
내용 출력 + 줄 바꿈 x

System.out.printf("형식형식형식...", 내용, 내용, 내용,...);
여러 내용을 지정한 형식으로 출력

%d 정수형을 10진수로 출력
%o 정수형을 8진수로 출력
%x 정수형을 16진수로 출력
%f 실수형을 소수 방식으로 출력
%e 실수형을 지수 방식으로 출력
%c 문자 출력
%s 문자열 출력
%b 논리값 출력
%n 줄 바꿈

예 ] 

	%10d : 10진수를 10자리에 맞춰 출력
	%10.4f : 실수를 10자리에 맞게 출력하는데 소수 이하는 4자리를 출력

< 자바에서 사용하는 단어 >
	식별자, 상수, 예약어(키워드)

	1. 식별자
	- 객체를 각각 구별할 수 있는 것
	- 클래스, 메소드, 변수, 상수에 프로그래머가 정하는 이름 (프로그래밍에서 사용하는 모든 이름)
	- 대소문자 엄격 구분
	- 길이 제한 x
	- 숫자 시작 x
	- 예약어, 상수 불가능
	- 식별자가 겹쳐서 구분해야할 경우 마침표로 연결해서 소속 표시
	
	2. 상수 : TRUE, FALSE, NULL
	3. 예약어 : 이미 약속된 의미를 갖는 단어
	
	< 클래스 정의 규칙 >
	
	- 첫 글자는 대문자
	- 한글 가능하지만 되도록 x
	- 특수 문자는 2가지만 가능 (_, $ -> 첫 글자로도 가능)
	- 두 단어 이상으로 구성될 때 각 단어의 첫 글자는 대문자 표기 (Camel 표기법)
	
	< 변수, 메소드 정의 규칙 >
	
	- 첫 글자는 소문자
	- 두 단어 이상으로 구성될 때 두번째 단어 이후 첫 글자는 대문자 표기 (Camel 표기법)
	
	< 상수 정의 규칙 >
	
	- 모든 문자는 대문자
	- 두 단어 이상으로 구성될 때 각 단어를 _로 연결
	
	문자는 정수를 사용하고 있으므로 대소비교 가능
	정수를 이용해 자체적으로 문자화 / 이 때 사용하는 것이 ''

< 자바 기호 >

	(), {}, [] : 영역 구분
	'' : 문자 표시
	"" : 문자열 표시
	; : 명령문의 끝

< Class 만드는 방법 >

	[접근지정자] [속성] Class 클래스이름 {
	}

	접근지정자 - public 혹은 생략

	Q. private class #Abc {
	}
	가 잘못되었다면 이유를 설명하고 수정하기
	
	A. 접근지정자는 public 혹은 생략만 가능한데 private이 선언되었고,
	클래스 이름에 사용 불가능한 특수문자 #이 사용되었으므로 정상적인 class라고 볼 수 없음
	따라서 public class Abc{
	}
	로 고칠 수 있음

< 진입점 함수 >

	- 어떤 프로그램을 시작하는 함수
	- 클래스가 실행되려면 JVM에 의해 실행되는 함수가 있어야함
	- JVM은 오직 "public static void main(String[] args)" 사용
	- 어떤 클래스를 만들고 그 클래스가 실행되기 위해서는
	  반드시 public static void main(String[]) args)가 존재


*** < 자료형 >

	기본 자료형
	
	논리형   boolean   1byte
	문자형     char    2byte
	정수형     byte    1byte
	          short    2byte
	           int     4byte
	          long     8byte
	실수형    float    4byte
	         double    8byte
	         
	int, double : 숫자형 기본 입력 타입
	정수형은 int로 자동 결정
	실수형은 double로 자동 결정
	