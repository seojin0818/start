# day17

자바 공부하는 방법
	
	자바프로그램을 사용하는 방법
	
	클래스 사용하는 방법
	==> 클래스를 사용한다는 것은
		해당 클래스를 new 시켜서 힙 메모리에 내용을 올려놓은 후에 필요한 것을 꺼내서 사용한 것
		
		new 시키면 힙에 만들어진 인스턴스의 주소를 알려줄 것이고
		이것을 변수에 기억시켜서
		그 변수에 접근해서 멤버를 사용하면 될 것
		
			Abc a = new Abc(); // new 시키지 않으면 null로 나옴
			
			a.abc(); // a 안의 함수를 쓸 때
			a.no; // a 안의 변수를 쓸 때
			
			Abc a1; // null
			
		이후의 자바 공부법
		
			1. 클래스 많이 만들어보기
			2. 함수 많이 만들어보기
			3. 만든 클래스를 가져와서 사용하기
			...
			만들고 싶은 프로그램은 직접 만들어보기
---------------------------------------------------------------------

스트림 (Stream)
==> 자바는 외부 장치와 데이터를 주고 받는 방법을 하나의 방법으로 통일 시켜놓음
	그 방법이 Stream이라는 개념
	
	쉽게 설명하자면
	빨대로 생각했을 때 정확한 원리가 이해될 것
	
	즉, 스트림을 데이터를 주고 받을 외부장치에 꽂기만 하면
	나는 빨아들일 때 (같은 함수를 이용하면) 외부장치의 데이터가 들어옴
	
	참고 ]
		
		***
		스트림은 방향성이 있고 단방향
		즉, 하나의 스트림은 한방향으로만 데이터를 보낼 수 있음
		만약 같은 외부장치에 데이터를 주기도 하고 받기도 하고자 한다면
		스트림은 두개 필요
		
	스트림의 종류 (방향성)
	
		1. 프로그램으로 데이터가 들어오는 방향
			InputStream, Reader
			
		2. 프로그램에서 데이터가 나가는 방향
			OutputStream, Writer
			
	스트림의 종류 (데이터의 양)
		1. byte 단위 (1바이트)
			InputStream, OutputStream
			==> 속도 조금 느림
				기계어 처리 가능
			
		2. char 단위 (2바이트)
			Reader, Writer
			==> 속도가 조금 빠름
				오직 문자 처리만 가능
				
	스트림의 종류 (상대방 종류)
		1. 타겟 스트림 (기본 스트림)
			==> 외부 장치에 직접 연결되는 스트림
			
		2. 필터 스트림 (보조 스트림)
			==> 스트림의 속도 향상, 개발자의 편의를 위해서
				스트림에 연결되는 스트림
				
		참고 ]
			
			반드시 기본 스트림(타겟 스트림)은 존재해야 함
			필요에 따라서 필터 스트림을 연결해서 사용해야 함
			
---------------------------------------------------------------------

byte 단위 스트림

1. InputStream
	
	주요 함수
		int read()
		==> 오직 한 문자(1byte)만 읽어들이는 함수
			반환값은 읽은 데이터(문자)
			
		int read(byte[] b)
		==> 여러 바이트를 읽어들이는 함수
			읽은 결과는 입력되는 byte 배열에 기억되고
			반환값은 읽은 데이터의 개수(바이트 수)
			
		int read(byte[] b, int off, int len)
		==> 여러 바이트를 읽어들이는 함수
			다만, 배열의 지정한 위치에서부터 지정한 개수만큼만 읽어줌
			반환값은 읽은 데이터의 개수(바이트 수)
			
2. FileInputStream
==> 파일에 연결되는 입력용 스트림
	
	생성방법 ]
		
		FileInputStream(String name)
		==> 스트림을 연결할 파일의 이름을 이용해서 스트림을 연결
		
3. FileOutputStream
==> 파일로 연결된 보내는 방향의 스트림
	
	기본함수 ] OutputStream의 기본 함수들
		void write(int b)
		==> 한 글자(1byte)만 내보내는 함수
		
		void write(byte[] b)
		==> 여러 문자를 내보내는 함수
		
		void write(byte[] b, int off, int len)
		==> 여러 글자 중에서 지정한 부분만 내보내는 함수
			
				int off : 내보낼 시작 위치
				int len : 내보낼 데이터 개수
				
---------------------------------------------------------------------

File
==> 이것은 스트림은 아님 (데이터 입력, 출력 기능은 없음)
	다만 우리가 외부 장치 중에서 가장 많이 사용하는 외부 장치가 파일이기 때문에
	그 파일에 대한 정보를 처리하기 위한 클래스
	
	생성방법
		File(String pathname)
		==> 파일의 경로와 이름을 지정해서 만들기
		
		File(String parent, String child)
		==> 파일의 경로와 이름을 따로 지정해서 만들기
		
		File(File parent, String child)
		==> 파일의 정보를 이용하고 파일의 이름만 다시 지정해서 만들기
		
		참고 ]
			
			자바에서 파일은 폴더 자체도 파일로 처리
			
			예 ]
			
				File f = new File("c:\\");
				
		File(URI uri)
		==> 네트워크에서 다른 시스템에 있는 파일의 정보 만들기
		
	참고 함수
	
		1. 정보를 알아내는 함수
			getName()		: 파일의 이름만 알아내는 함수
			getParent()		: 폴더 이름만 알아내는 함수
			exists()		: 파일의 존재여부를 알려주는 함수
			length()		: 파일의 크기를 알려주는 함수
			...
			
			
		2. 외부적인 작업을 하기 위한 함수
			==> 데이터 입출력 이외의 파일 전체에 대해서 필요한 작업을 할 수 있는 함수들
			
			delete()		: 파일 삭제
			mkdir()			: 폴더 생성 (하나만 만들 수 있음)
			mkdirs()		: 폴더들을 생성 (계층으로 만들 수 있음)
							예 ] a/b/c/d ==> 없는 폴더도 모두 만들어줌
			renameTo		: 파일 이름 변경
			list()			: 폴더에 있는 파일의 목록을 구하는 함수
			...
			
		참고 ]
		
			String[] list()		- 이름만 알아냄
			File[] listFiles()	- 정보도 알아냄
				==> 일반적인 파일의 목록을 알아내는 함수
				
			String[] list(FilenameFilter filter)
			File[] listFiles(FileFilter filter)
			File[] listFiles(FilenameFilter filter)
			==> 필터링해서 리스트를 구할 수 있는 함수
				내가 원하는 파일만 골라서 목록을 구할 수 있음
				
---------------------------------------------------------------------

필터 스트림
==> 1. 기본 스트림에 기능을 추가한다든지
	2. 사용자의 편의를 제공하기 위한
		보조적인 기능을 하는 스트림
		
		주의 ] 
		
			반드시 기본 스트림은 존재해야 하고
			필터 스트림은 필요에 따라서 연결해 사용하면 됨
			
		참고]
			
			스트림은 방향성이 있음
			필터 스트림 역시 방향성을 가지고 있으며
			반드시 같은 방향끼리만 연결해야 함
			
***
1. BufferedInputStream / BufferedOutputStream
	==> 사용자 편의 기능은 없고
		대신 스트림의 성능을 향상시키는 역할
		버퍼에 데이터를 모았다가 한번에 처리하는 기능이 추가된 스트림
		
	주요함수
		flush()
		==> 강제로 버퍼를 비우는 함수
		
2. DataInputStream / DataOutputStream
	==> 많이 사용하는 스트림은 아님
		기능 향상은 없고 대신 보통 스트림은 반드시 byte[]로만 데이터를 처리함
		문자 데이터가 아닌 다른 형태의 데이터는 문제가 있을 수 있음
		==> 자바의 데이터형을 byte[] 변환하지 않고
			직접 외부장치로 입출력하는 기능을 추가한 것
			
		잘 사용하지 않는 이유
		<== DataOutputStream으로 데이터를 내보낸 경우에는 반드시 DataInputStream으로 받아야 함
			꺼낼 때도 순서가 지켜져야 함
			(저장할 때 int, float ==> int, float의 순서대로 받아야 함)

PrintStream
==> 필터 스트림
	사용자 편의성 + 기능향상을 동시에 만들어놓은 보조 스트림
	
	기능 ]
	
		1. 내부적으로 BufferedStream과 연결해 놓음
		2. 사용자 편의를 위해서 자바의 데이터 형태를 그대로 출력하도록 해놓음
		3. 파일과 직접 연결하도록 해놓음
			(내부적으로 타겟 스트림을 만들어서 장치와 연결해 사용하도록 해놓음
			다른 장치에도 연결 가능)
			
	단점 ]
		
		한쌍을 다루는 입력 쪽 스트림이 없음
		
---------------------------------------------------------------------		

char 단위 스트림
==> 한 번 입출력할 때 2바이트 단위로 입출력할 수 있는 스트림

	주의 ]
	
		기계어 상태의 내용은 절대로 문자 단위 입출력을 사용하면 안 됨
		이것은 오직 텍스트 문서에 한해서만 사용해야 함
		
		기계어 문서는 반드시 byte 단위의 입출력을 사용해야 함
		
		2byte가 1char가 될 때 바이트 순서가 뒤집어짐
		
		예 ]
			
			가
				ㄱ	: 0011		ㅏ : 0101	이라고 가정하면
				
				00110101 이라고 생각하겠지만
				01010011 로 뒤집혀서 처리
				
1. FileReader / FileWriter
==> 파일에 직접 연결된 타겟 스트림
	단위는 char 단위가 됨
	
	내부적으로 char 단위로 처리한다는 것만 변경이 되었고
	처리 방식은 바이트 기반 스트림과 처리 순서가 똑같음
	
2. 관련된 필터 스트림
	
	1. BufferedReader / BufferedWriter
		==> 중간에 버퍼 기능을 추가해서 스트림의 성능 향상을 위한 보조 스트림
		
		참고 ]
			
			가장 핵심적인 함수
			char의 기본 함수에는 문자열을 읽을 수 있는 함수가 없음
			
			readLine() ==> 한 줄 단위로 문자열을 그대로 읽어서 사용할 수 있는 함수
			
				참고 ]
					
					이 함수는 줄 단위로 한 줄씩 읽는 함수
					이 말은 줄바꿈기호(\r\n)를 발견하면 그 곳에서 읽는 것을 멈춤
					
					필요하면 줄 단위를 강제로 추가해줘야 함
					결과적으로 이 함수는 줄 단위를 삭제함
					
	2. PrintWriter
		==> 바이트 기반 스트림 중 PrintStream처럼
			필터 계열의 스트림
			
				1. 버퍼 기능을 가지고 있음
				2. 직접 파일에 연결할 수 있음
				3. 사용자 편의를 제공함
					(자바의 데이터형을 그대로 출력할 수 있음)

참고 ]
	
	스트림을 연결할 때 주의 사항
		1. 반드시 같은 방향끼리만 연결 가능
		2. 같은 크기만 연결할 수 있음
			==> 바이트 기반은 바이트 기반끼리만 / 문자 기반은 문자 기반끼리만
				
				예 ]
				
				FileInputStream fin = ...;
				BufferedOutputStream bout = new BufferedOutputStream(fin); ==> X : 방향이 다름
				BufferedReader br = new BufferedReader(fin); ==> X : 크기가 다름
				
	참고 스트림 ]
	
		InputStreamReader / OutputStreamWriter
		==> 크기가 다른 두개의 스트림을 연결할 때 사용하는 보조 스트림
		
		주의 ]
		
			반드시 타겟 스트림은 byte 기반이어야 하고 보조 스트림이 char 기반인 스트림을 연결할 때 사용하는 스트림
			
---------------------------------------------------------------------

객체의 직렬화
==> 데이터는 자바의 기본형 이외에도 클래스 전체를 데이터로 상대방(외부장치)와 입출력 가능
	==> 이때는 함수는 제외되고
		그 클래스 안에 있는 변수의 내용만 입출력 됨
		
		이처럼 클래스가 다른 장치에 전달되는 상태를 직렬화라고 표현함
		
		직렬화라고 표현하는 이유는
		클래스에 있는 변수의 내용이 순서대로 입출력 된다는 의미에서 붙여진 이름
		
	***
	참고 ]
		
		아무 클래스나 입출력 되는 것은 아니고
		그 클래스가 직렬화 가능한 클래스여야만 함
		직렬화 가능한 클래스는
			Serializable 인터페이스를 구현한 클래스
			
		직렬화는 변수의 내용만 입출력되므로
		네트워크처럼 서로 떨어진 경우에는
		양쪽에 같은 클래스가 존재해야 함
		(왜냐하면 클래스 구조는 전달되지 않고 변수 내용만 전달되기 때문에
			양쪽 모두 클래스의 구조는 가지고 있어야 함)
		이 때 양쪽에 있는 클래스는
			클래스 이름 + 패키지 이름이 모두 동일해야 함
			
		이 때 사용하는 보조 스트림
			
			ObjectInputStream / ObjectOutputStream
			
		==> 이것은 주로 네트워크에서 많이 사용하므로
			
			Reader / Writer처럼 문자 기반은 없음
		
---------------------------------------------------------------------		

IO 쪽에서 해야할 공부
	==> 필요한 데이터를 파일에 저장할 수 있고
		저장된 내용을 불러와서 사용할 수 있으면 됨
		