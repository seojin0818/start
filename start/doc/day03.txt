# day03

컴퓨터가 숫자를 기억하는 방법

	==> 
	
			정수의 경우
			==> 2진수로 변환하고
				부호 비트는 무조건 0을 붙임
				
				ex ]
							10
					2		5		0
					2		2		1
					2		1		0
					2		0		1
					
			음수의 경우
			==> 9의 보수법을 이용해서 처리
			
				1) 양수로 가정하고 2진수로 변환
				2) 보수화 시킴 (현재 숫자를 바꿈 0 ->1, 1 -> 0 ==> 비트를 뒤집음)
				3) + 1
				4) 부호비트에 강제로 1을 지정함
				
---------------------------------------------------

연산자
==> 데이터를 가공하기 위해서 사용되는 기호

	용어
		연산자		- 가공방식을 나타내는 기호
		피연산자	- 가공에 사용되는 데이터
		
		ex ]
		
			1 + 2 ==> + : 연산자, 1과 2는 피연산자
			
		참고 ]
			연산자를 사용하면 가공된 결과가 나오는데
			이 결과는 항상 큰 형태로 나오는 것을 원칙으로 함
			
			ex ]
			
				1 + 3.14 ==> 4.14 이 때 결과값의 데이터 형태는 double
				
				int + double ==> double
				
				이 때 정수형 데이터는 실수형 데이터로 자동 형변환
------------------------------------------------------------------

문제 ]
		'J' + 3.14 ==> ?
		
		'J'는 아스키 코드 값이 74로 변환 돼서 연산 수행
		따라서 74 + 3.14의 연산을 하게 되고
		결과 값은 double형 데이터 77.14
						
				참고 ]
				
					기본데이터타입 + 문자열 데이터 ==> 문자열
					
					ex ]
						3.14 + "!!!!" ==> 3.14!!!
						이 때 + 는 산술연산을 하는것이 아니라
						데이터 2개를 결합하는 결합연산자로서 작동
			
			주의 ]
			
				수학에서는 비교연산을 할 때
				3개의 항을 동시에 비교할 수 있었지만
				프로그래밍에서는 절대로 3개 이상의 피연산자를
				동시에 연산하는 경우는 없음
				
				1 < x < 10 --- 수학에서 사용하는 방식
				
				==>
				자바에서의 방식
				x > 1 and x < 10
				
-----------------------------------------------------------

종류

	1. 사칙연산자
		==> 더하고 빼고 곱하고 나누고 나머지 구하는 연산자
		
			기호
				+	- 더하기 연산자
				-	- 빼기 연산자
				*	- 곱하기 연산자
				/	- 나누기 연산자
				%	- 나머지 연산자
				
			참고 ]
				사칙연산자는 피연산자가 반드시 2개 필요
					참고 ]
						사칙연산자가 여러개 동시에 기술된 경우
						왼쪽부터 차례로 계산해서 결과값을 만들어나감
							
	2. 대입연산자
		==> 변수에 데이터를 기억하도록 하는 연산자
			
			기호		=
						+=
						-=
						*=
						/=
						%=
			
			형식 ]
				변수 = 데이터;
				* 반드시 대입연산자 왼쪽에는 변수가
				오른쪽에는 데이터가 위치해야 함
			의미 ]
				데이터를 변수에 기억시키세요
				
			참고 ]
				자바는 모든 연산이 반드시 대입연산자가 있어야 기억할 수 있음
				만약 대입하지 않으면 연산의 결과는 기억되지 못함
				
			참고 ]
				모든 연산자는 같은 연산자가 중복된 경우
				왼쪽에서 오른쪽으로 진행하면서 연산
				
				ex ]
				
					1 + 2 + 3 + 4 + 5
						1 + 2
								+ 3
									+ 4
										+ 5
					이런 순서로 연산을 진행하는데
					대입연산자만큼은 오른쪽에서 왼쪽으로 진행
					
					ex ]
						int a = 10;
						int b = 20;
						int c = 30;
						int d = 40;
						
						a = b = c = d;
						a b c d 모두 40
						<------------ 방향으로 대입연산 진행
						
		참고 ]
			
			변수 = 변수 + 데이터;
			==>
			변수 +=데이터;
--------------------------------------------------------------
참고 ]
	
	+ 기호는 문자열 연산에서도 사용 가능
	(문자열 연산은 오직 + 기호만 사용 가능)
	==> 이 때 문자열이 결합되어서 결과 생성
		결합이란?
			앞 문자열에 뒤 문자열이 붙어서 만들어지는 것
			
			"홍" + "길동" ==> "홍길동"
			
			참고 ]
				모든 기본데이터타입의 데이터를 문자열에 결합하면
				결과는 문자열 생성
				
				'홍' + "길동" ==> "홍길동"
				길동의 데이터타입이 더 크기 때문에
				기억할 수 있는 바이트 수의 제한이 없음
				'홍'은 char타입으로 정해져있음 (2바이트)
		참고 ]
			문자열 결합은 문자열이 단 한개만 있어도 허용
			즉, 결합하는 두 항 중에서 하나만 문자열이라도 문자열 결합으로 처리
			왜? 문자열이 더 크니까
			
			ex ]
				"홍" + 1000 ==> "홍1000"
				
				200 + "홍" ==> "200홍"
				
		참고 ]
			System.out.println(데이터)에서는 오직 한개만 출력 가능
			ex ]
				System.out.println("홍길동", "고길동", "둘리");
				==> 불가능
				
			여러개를 출력하고자 한다면
			문자열 결합을 이용해서 결합해서 하나의 문자열을 만든 후 출력해야 함
			
--------------------------------------------------------------					
	3. 증감연산자
	
		형식 ]
			++변수
			변수++
			
		기호 ]
			++ : 1 증가시켜줌 ( 딱 한 번만)
			-- : 1 감소시켜줌 ( 딱 한 번만)
		참고 ]
			모든 연산은 일반적으로 중앙처리장치에서 처리되는 것이 원칙
			증감연산자, 시프트연산자는 중앙처리장치를 거치지 않는다.
			메모리 상에서 연산돼서 처리
			
	4. 부호반전연산자
		기호 ]
			-
		형식 ]
			-데이터;
	
	5. 비교연산자
		==> 두 데이터의 대소 관계를 비교하는 연산자
		
		기호 ]
			= : 대입연산자 (구분 주의)
			== 같다
			!= 다르다
			> 크다
			< 작다
			>= 크거나 같다
			(=>는 x , 대소기호가 왼쪽에 와야함)
			
			<= 작거나 같다
		
		주의 ]
			사용되는 데이터와 관계없이 결과는 항상 논리값(true, false)로 출력
			
		참고 ]
			이 연산자는 주로 if, for, while, ... 제어 명령에서 질문이 필요할 때
			많이 사용되는 연산자
		
		*****
		참고 ]
			문자열을 비교할 경우에는 equals()를 사용해서 비교해야
			데이터를 정확하게 비교 가능
			
		참고 ]
			비교연산자는 3항을 동시에 비교하지는 못함
			
			ex ]
				
				10 <= no < 100 ------------> X
				no >= 10 and no < 100 -----> O
			
	6. 논리연산자
		
		기호 ]
			&
			| 또는
			&&
			||
			! 부정
			
	7. 비트 연산자
	
	8. 3항연산자(조건연산자)
